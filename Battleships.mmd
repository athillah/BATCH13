classDiagram
direction LR

Ship ..|> IShip : Implements

IShip "1..*" <-- GameController : Uses
IShip --> Coordinate : Contains

GameController --> "2" IPlayer : Manages
GameController --> "2" IBoard : Uses
GameController --> Coordinate : Contains

Coordinate <-- IBoard : Contains

IBoard --> Tile : Uses

Tile --> TileDisplay : Contains
Tile --> TileDetail : Contains

IPlayer <|.. Player : Implements
IBoard <|.. Board : Implements

class GameController {
    -bool _turn
    -IPlayer _player1
    -IPlayer _player2
    -Dictionary<.IPlayer, IBoard> _playerBoard
    -Dictionary<.IPlayer, List<.IShip>> _playerShip

    +Action<.bool, int x, int y> OnHit
    +Action<.bool, IShip> OnSunk
    +Action OnTurnChange

    +GameController(IPlayer player1, IPlayer player2)

    +SetShips(IPlayer player, List<IShip> ships) : void
    +SetBoard(IPlayer player) : bool
    +RotateShip(bool orientation) : bool
    +PlaceShips(IPlayer player, int x, int y, bool orientation) : void
    +IsValidPlacement() : bool

    +Start() : void
    +TakeTurn(bool turn, IPlayer player1, IPlayer player2) : bool

    +Attack(IPlayer player, int x, int y) : void
    +DidTileHitBefore(IBoard board, int x, int y) : bool
    +IsHit(IPlayer player, int x, int y) : bool
    +ReceiveAttack(IPlayer player, int x, int y) : void
    +IsSunk(IShip ship) : void
    +IsOutOfShips(IPlayer player) : bool

    +NotifyOnHit(bool turn, int x, int y) : void
    +NotifyOnSunk(bool turn, IShip ship) : void
    +NotifyOnTurnChange() : void

    +DisplayBoard(IBoard board) : void
    +DisplayFleet(IPlayer player) : void
}

class IPlayer {
    <<Interface>>
    +bool TurnOrder
    +string Name
}


class Player {
    +bool TurnOrder : readonly
    +string Name : readonly
    +Player(bool turnorder, string name)
}

class IBoard {
    <<Interface>>
    -int _size
    +bool Visibility
    +Dictionary<.Coordinate, Tile> Tiles

    +OnHit(bool visibility, int x, int y) : void
    +OnTurnChange() : void
    +OnSunk(bool visibility, IShip ship) : void
}

class Board {
    -int _size : readonly
    +bool Visibility
    +Dictionary<.Coordinate, Tile> Tiles

    +Board(bool visibility, int size)
    
    +OnHit(bool visibility, int x, int y) : void
    +OnTurnChange() : void
    +OnSunk(bool visibility, IShip ship) : void
}

class Tile {
    +TileDetail TileDetail
    +TileDisplay TileDisplay
}

class TileDisplay {
    <<Enumeration>>
    WhiteSpace
    Hit
    Miss
    Ship
    SunkenShip
}

class TileDetail {
    <<Enumeration>>
    HasShip
    NoShip
}

class Coordinate {
    <<Struct>>
    +int AxisX
    +int AxisY
}

class IShip {
    <<interface>>
    +int Length
    -int _hitCount
    +bool Sunken
    +bool Orientation
    +List<.Coordinate> ShipCoordinate

    +SetCoordinate(int x, int y, bool orientation) : void
    +GetCoordinate() : List<.Coordinate>
    +IsSunk() : bool
}

class Ship {
    +int Length
    -int _hitCount
    +bool Sunken
    +bool Orientation
    +List<.Coordinate> ShipCoordinate

    +Ship(int length)
    +SetCoordinate(int x, int y, bool orientation) : void
    +GetCoordinate() : List<.Coordinate>
    +IsSunk() : bool
}
